Java 8

1. Lambda
2. Streams API
3. Interfaces
4. Java Date & Time API
5. Misc


1. what is Java Stream API?
ans: A sequence of elements supporting sequential and parallel aggregate operations. The following example illustrates an aggregate operation using Stream and IntStream:

	i) Nothing to do with existing I/O stream.
	ii) Its not data structure, uses data structure, does not change data structure.
	iii) intermediate operations are Lazy evaluation and returns streams.
	iv) For parallel processing, many implementations are available.
for example - map(),reduce(),filter(),forEach() etc.
	v) Example.
	//numbers.stream().map(x -> x+1).forEach(i -> System.out.println(i));
	int result = numbers.stream().reduce((x,y) -> x+y).get();
	//System.out.println(result);
		
	numbers.stream().filter(x -> x%2==0).forEach(i -> System.out.println(i));

2) changes in collection related to stream?
ans: i) stream() - Returns a sequential Stream with this collection as its source.
    ii) stream

3) what is execution sequence for stream?
ans: even after multiple statements, collection is always processed with a single pass - Lazy invocation.
		List<Integer> numbers = Arrays.asList(1,2,3,4);		
		
		//numbers.stream().filter(x -> x%2==0).forEach(i -> System.out.println(i));		
		
		Stream<Integer> newstream = numbers.stream().filter(x -> {
			System.out.println("hello from inside filter "+x);
			return x%2==0;
		});
		//newstream = [2,4];
		System.out.println("after filter");
		newstream.forEach(i -> System.out.println("from foreach "+i));

		//output is not accoring to sequence but lazy invocation
	after filter
	hello from inside filter 1
	hello from inside filter 2
	from foreach 2
	hello from inside filter 3
	hello from inside filter 4
	from foreach 4

4) what is Optional?
ans: A container object which may or may not contain a non-null value. If a value is present, isPresent() will return true and get() will return the value.

5) NullPointerException - because object reference is null? whats solution in java 8?/how do you handle NullPointerException using Optional class?
ans: RuntimeException NullPointerException= if any object is not available java assigns- null.

6) what is collect(), what is Collectors?
ans: collecting data for aggregate operation with the help of Collectors which encapsulates functions to apply.

Performs a mutable reduction operation on the elements of this stream using a Collector. A Collector encapsulates the functions used as arguments to collect(Supplier, BiConsumer, BiConsumer), allowing for reuse of collection strategies and composition of collect operations such as multiple-level grouping or partitioning.
example: 

Map<String, List<Person>> group = people.stream().collect(Collectors.groupingBy(Person::getLname));
		
System.out.println(group.get("Sharma"));







